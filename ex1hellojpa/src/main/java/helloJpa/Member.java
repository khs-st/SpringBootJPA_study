package helloJpa;

import javax.persistence.*;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Date;

//엔티티 매핑
//JPA를 사용해서 테이블과 매핑할 클래스는 @Entity 필수
@Entity
@TableGenerator(name = "MEMBER_SEQ_GENERATOR", table = "MY_SEQUENCES", pkColumnValue = "MEMBER_SEQ", allocationSize = 1)
//매핑할 데이터베이스 시퀀스 이름
//@SequenceGenerator(name="member_seq_generator",sequenceName = "member_seq")
//엔티티 속성 name을 이용하여 매핑 테이블 지정 가능(@Table은 엔티티와 매핑할 테이블 지정)
//@Table(name="MBR")
public class Member {

    //기본 키 직접 할당
    @Id
    //IDENTITY -> 기본 키 생성을 데이터베이스에 위임
    //아래의 쿼리로 생성
    //    create table Member (
    //       id varchar(255) generated by default as identity,
    //        name varchar(255),
    //        primary key (id)
    //    )
    //@GeneratedValue(strategy = GenerationType.IDENTITY)
    //SEQUENCE -> 데이터베이스 시퀀스는 유일한 값을 순서대로 생성하는 특별한 데이터베이스 오브젝트(예: 오라클 시퀀스)
    //call next value for hibernate_sequence -> 데이터베이스에서 다음 시퀀스 설정 쿼리 실행
    //String 값은 안된다.
    //generator를 이용해 SequenceGenerator 이름 설정
    @GeneratedValue(strategy = GenerationType.TABLE,generator = "MEMBER_SEQ_GENERATOR")
    private Long id;
    
    //데이터베이스 컬럼명 -> updatable 변경 가능 여부(기본값 true)
    @Column(name = "name", updatable = false)
    private String username;


    public Member(){

    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }
}
